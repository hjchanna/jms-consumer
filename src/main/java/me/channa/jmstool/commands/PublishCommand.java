package me.channa.jmstool.commands;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import org.apache.log4j.Logger;

import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import java.util.Properties;

@Parameters(commandDescription = "Publish messages to a JMS queue")
public class PublishCommand implements ICommand {
    private static final Logger LOGGER = Logger.getLogger(PublishCommand.class);

    @Parameter(names = "-url", required = true, description = "AMQP connection url of the message broker (amqp://[<user>:<pass>@][<clientid>]<virtualhost>[?brokerlist='<broker url>[;<broker url>]'])")
    private String url;

    @Parameter(names = "-queue", required = true, description = "JMS message queue name to publish messages")
    private String queue;

    @Parameter(names = "-count", description = "Number of messages to be published")
    private int count = 1;

    @Parameter(names = "-message", description = "Message to be published to the queue")
    private String message = "Test message %d generated by JmsTool";

    private static final String QPID_INITIAL_CONNECTION_FACTORY = "org.wso2.andes.jndi.PropertiesFileInitialContextFactory";
    private static final String CONNECTION_FACTORY_NAME_PREFIX = "connectionfactory.";
    private static final String CONNECTION_FACTORY_NAME = "qpidConnectionfactory";

    @Override
    public void execute(JCommander jCommander) {
        LOGGER.debug(String.format("JMS publish command received with params - url: %s; queue: %s; count: %d; message: %s", url, queue, count, message));

        QueueConnection queueConnection = null;
        QueueSession queueSession = null;
        MessageProducer producer = null;

        try {
            // JNDI properties
            Properties properties = new Properties();
            properties.put(Context.INITIAL_CONTEXT_FACTORY, this.QPID_INITIAL_CONNECTION_FACTORY);
            properties.put(this.CONNECTION_FACTORY_NAME_PREFIX + this.CONNECTION_FACTORY_NAME, this.url);
            properties.put("queue." + this.queue, this.queue);
            LOGGER.debug(String.format("JNDI properties initiated: %s", properties));

            InitialContext ctx = new InitialContext(properties);
            LOGGER.debug("InitialContext created for supplied properties");

            // Lookup connection factory
            QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(this.CONNECTION_FACTORY_NAME);
            queueConnection = connFactory.createQueueConnection();
            LOGGER.debug("Queue connection established");

            // JMS connection and the session
            queueConnection.start();
            queueSession = queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
            LOGGER.debug("Queue session initiated");

            // Queue producer
            Queue queue = (Queue) ctx.lookup(this.queue);
            producer = queueSession.createProducer(queue);
            LOGGER.debug("Queue producer initiated");

            // Iterate over the number of message count to receive
            for (int i = 0; i < count; i++) {
                TextMessage jmsMessage = queueSession.createTextMessage(String.format(message, i));
                producer.send(jmsMessage);

                LOGGER.info(String.format("Message publish with text: %s", String.format(message, i)));
            }

        } catch (NamingException | JMSException exception) {
            LOGGER.error("An error occurred while publishing messages", exception);
        } finally {
            LOGGER.debug("Closing active connections if available");
            try {
                if (producer != null) {
                    producer.close();
                }

                if (queueConnection != null) {
                    queueSession.close();
                }

                if (queueConnection != null) {
                    queueConnection.close();
                }
            } catch (Exception exception) {
                LOGGER.error("Error occurred while closing JMS connections", exception);
            }
        }
    }
}
